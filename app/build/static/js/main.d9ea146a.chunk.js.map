{"version":3,"sources":["DataDisplay.js","SeasonContainer.js","App.js","serviceWorker.js","index.js"],"names":["DataDisplay","react_default","a","createElement","main_default","name","src","this","props","data","iconStyle","indentWidth","collapsed","collapseStringsAfterLength","displayDataTypes","Component","SeasonContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","Axios","get","season","then","res","setState","state","dataDisplay","src_DataDisplay","onClick","App","seasons","seasonComponents","forEach","push","src_SeasonContainer","key","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAkBeA,mLAbP,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAWG,KAAK,SACLC,IAAKC,KAAKC,MAAMC,KAChBC,UAAU,SACVC,YAAa,EACbC,WAAW,EACXC,2BAA4B,IAC5BC,kBAAkB,WATbC,8BC0BXC,cAxBb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,QAMFgB,YAAc,WACZC,IAAMC,IAAI,8BAA8BR,EAAKT,MAAMkB,QAAQC,KAAK,SAACC,GAC/DX,EAAKY,SAAS,CAACpB,KAAMmB,EAAInB,UAP3BQ,EAAKa,MAAQ,CACXrB,KAAM,MAHIQ,wEAcZ,IAAIc,EAAcxB,KAAKuB,MAAMrB,KAAOR,EAAAC,EAAAC,cAAC6B,EAAD,CAAavB,KAAMF,KAAKuB,MAAMrB,OAAW,KAC7E,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS1B,KAAKgB,aAAchB,KAAKC,MAAMkB,QAC7CK,UAnBoBhB,aCwBfmB,cAtBb,SAAAA,IAAc,IAAAjB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAA2B,IACZjB,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAgB,GAAAZ,KAAAf,QACKuB,MAAQ,CACXK,QAAS,CAAC,KAAM,KAAM,KAAM,OAHlBlB,wEAQZ,IAAImB,EAAmB,GAMvB,OALA7B,KAAKuB,MAAMK,QAAQE,QAAQ,SAACX,GAC1BU,EAAiBE,KACbrC,EAAAC,EAAAC,cAACoC,EAAD,CAAiBC,IAAK,mBAAmBd,EAAQA,OAAQA,OAI7DzB,EAAAC,EAAAC,cAAA,OAAKsC,UAAU,OACZL,UAjBSrB,aCKE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.d9ea146a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactJson from 'react-json-view';\n\nclass DataDisplay extends Component {\n    render() {\n        return (\n          <ReactJson name='season'\n                     src={this.props.data}\n                     iconStyle='circle'\n                     indentWidth={2}\n                     collapsed={true}\n                     collapseStringsAfterLength={120}\n                     displayDataTypes={false}\n          />\n        )\n    };\n}\n\nexport default DataDisplay;\n","import React, { Component } from 'react';\nimport DataDisplay from './DataDisplay';\nimport Axios from 'axios';\n\nclass SeasonContainer extends Component {\n  constructor() {\n    super()\n    this.state = {\n      data: null\n    }\n  }\n\n  handleClick = () => {\n    Axios.get('http://heyparkerj.com/data/'+this.props.season).then((res) => {\n      this.setState({data: res.data})\n    })\n  }\n\n  render() {\n    let dataDisplay = this.state.data ? <DataDisplay data={this.state.data} /> : null\n    return (\n      <div>\n        <button onClick={this.handleClick}>{this.props.season}</button>\n        { dataDisplay }\n      </div>\n    )\n  }\n}\n\nexport default SeasonContainer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport SeasonContainer from './SeasonContainer';\nimport DataDisplay from './DataDisplay';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      seasons: [2015, 2016, 2017, 2018]\n    }\n  }\n\n  render() {\n    let seasonComponents = []\n    this.state.seasons.forEach((season) => {\n      seasonComponents.push(\n          <SeasonContainer key={`seasonContainer-`+season} season={season} />\n      )\n    })\n    return (\n      <div className=\"App\">\n        {seasonComponents}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}